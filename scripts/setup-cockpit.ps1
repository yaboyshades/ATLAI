#!/usr/bin/env pwsh
# Ultimate Terminal Cockpit Setup Script for Super Alita
# Cross-platform PowerShell script for complete environment setup

param(
    [switch]$InstallTools,
    [switch]$ConfigureProfile,
    [switch]$SetupDocker,
    [switch]$All
)

# Colors for output
$Colors = @{
    Info      = "Cyan"
    Success   = "Green"  
    Warning   = "Yellow"
    Error     = "Red"
    Highlight = "Magenta"
}

function Write-StatusMessage {
    param([string]$Message, [string]$Type = "Info")
    $color = $Colors[$Type]
    Write-Host $Message -ForegroundColor $color
}

function Test-Command {
    param([string]$Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

function Install-ToolsIfNeeded {
    Write-StatusMessage "üîß Checking and installing required tools..." "Info"
    
    $tools = @(
        @{ 
            Name    = "starship"
            Check   = "starship"
            Windows = "winget install starship"
            Linux   = "curl -sS https://starship.rs/install.sh | sh"
            MacOS   = "brew install starship"
        },
        @{
            Name    = "docker"
            Check   = "docker"
            Windows = "winget install Docker.DockerDesktop"
            Linux   = "curl -fsSL https://get.docker.com | sh"
            MacOS   = "brew install docker"
        },
        @{
            Name    = "git"
            Check   = "git"
            Windows = "winget install Git.Git"
            Linux   = "sudo apt install git"
            MacOS   = "brew install git"
        }
    )
    
    foreach ($tool in $tools) {
        Write-StatusMessage "üîç Checking $($tool.Name)..." "Info"
        
        if (Test-Command $tool.Check) {
            Write-StatusMessage "‚úÖ $($tool.Name) is already installed" "Success"
        }
        else {
            Write-StatusMessage "‚ö†Ô∏è  $($tool.Name) not found" "Warning"
            
            if ($IsWindows -or $env:OS -eq "Windows_NT") {
                $installCmd = $tool.Windows
            }
            elseif ($IsLinux) {
                $installCmd = $tool.Linux  
            }
            elseif ($IsMacOS) {
                $installCmd = $tool.MacOS
            }
            else {
                $installCmd = $tool.Windows  # Default fallback
            }
            
            Write-StatusMessage "üí° Install with: $installCmd" "Highlight"
        }
    }
    
    # Python packages
    Write-StatusMessage "üêç Checking Python development tools..." "Info"
    $pythonTools = @("ptpython", "ipython", "jupyter", "glances")
    
    foreach ($tool in $pythonTools) {
        try {
            pip show $tool 2>$null | Out-Null
            Write-StatusMessage "‚úÖ $tool is installed" "Success"
        }
        catch {
            Write-StatusMessage "‚ö†Ô∏è  $tool not found. Install with: pip install $tool" "Warning"
        }
    }
}

function Setup-StarshipConfig {
    Write-StatusMessage "üåü Setting up Starship configuration..." "Info"
    
    # Determine config directory
    if ($IsWindows -or $env:OS -eq "Windows_NT") {
        $configDir = "$env:USERPROFILE\.config"
    }
    else {
        $configDir = "$env:HOME/.config"
    }
    
    if (-not (Test-Path $configDir)) {
        New-Item -ItemType Directory -Path $configDir -Force | Out-Null
    }
    
    $starshipConfig = Join-Path $configDir "starship.toml"
    $sourceConfig = "config/starship/starship.toml"
    
    if (Test-Path $sourceConfig) {
        Copy-Item $sourceConfig $starshipConfig -Force
        Write-StatusMessage "‚úÖ Starship configuration installed to $starshipConfig" "Success"
    }
    else {
        Write-StatusMessage "‚ö†Ô∏è  Source config not found at $sourceConfig" "Warning"
    }
}

function Setup-PowerShellProfile {
    Write-StatusMessage "üìù Setting up PowerShell profile..." "Info"
    
    $profileContent = @"
# Super Alita Terminal Cockpit Enhancement
# Auto-generated by setup-cockpit.ps1

# Initialize Starship prompt
if (Get-Command starship -ErrorAction SilentlyContinue) {
    Invoke-Expression (&starship init powershell)
} else {
    Write-Host "‚ö†Ô∏è  Starship not found. Install with: winget install starship" -ForegroundColor Yellow
}

# Load Super Alita development aliases if in project directory
if (Test-Path "scripts\dev-aliases.ps1") {
    . "scripts\dev-aliases.ps1"
    Write-Host "üöÄ Super Alita development environment loaded!" -ForegroundColor Green
} elseif (Test-Path "dev-aliases.ps1") {
    . "dev-aliases.ps1"
    Write-Host "üöÄ Super Alita development environment loaded!" -ForegroundColor Green
}

# Auto-load secrets if available
if (Test-Path ".env.secrets") {
    # Load environment variables from .env.secrets
    Get-Content ".env.secrets" | ForEach-Object {
        if ($_ -match '^([^#][^=]*?)=(.*)$') {
            $name = $matches[1].Trim()
            $value = $matches[2].Trim()
            [Environment]::SetEnvironmentVariable($name, $value, "Process")
        }
    }
    Write-Host "üîê Secrets loaded" -ForegroundColor Green
}

# Enhanced directory navigation
function j { param($dir) Set-Location $dir }
function .. { Set-Location .. }
function ... { Set-Location ..\.. }
function .... { Set-Location ..\..\.. }

# Quick Git aliases
function gs { git status }
function gd { git diff }
function ga { git add . }
function gc { param($msg) git commit -m $msg }
function gp { git push }
function gl { git log --oneline --graph --decorate -10 }

# Docker shortcuts  
function dps { docker ps }
function dimg { docker images }
function dlog { param($container) docker logs -f $container }

# System info shortcuts
function sysinfo {
    Write-Host "üñ•Ô∏è  System Information" -ForegroundColor Cyan
    Write-Host "OS: $((Get-ComputerInfo).WindowsProductName)" -ForegroundColor Yellow
    Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow
    Write-Host "Location: $(Get-Location)" -ForegroundColor Yellow
    Write-Host "Time: $(Get-Date)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ Super Alita Terminal Cockpit Ready!" -ForegroundColor Green
Write-Host "üí° Type 'alita-info' for development commands" -ForegroundColor Yellow
Write-Host ""
"@
    
    if ($IsWindows -or $env:OS -eq "Windows_NT") {
        $profilePath = $PROFILE
    }
    else {
        $profilePath = "$env:HOME/.config/powershell/Microsoft.PowerShell_profile.ps1"
    }
    
    # Ensure profile directory exists
    $profileDir = Split-Path $profilePath -Parent
    if (-not (Test-Path $profileDir)) {
        New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
    }
    
    # Backup existing profile
    if (Test-Path $profilePath) {
        $backupPath = "$profilePath.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        Copy-Item $profilePath $backupPath
        Write-StatusMessage "üìã Backed up existing profile to $backupPath" "Info"
    }
    
    # Add our content to profile
    Add-Content -Path $profilePath -Value $profileContent
    Write-StatusMessage "‚úÖ PowerShell profile updated at $profilePath" "Success"
    Write-StatusMessage "üîÑ Restart PowerShell or run '. $profilePath' to activate" "Info"
}

function Setup-DockerEnvironment {
    Write-StatusMessage "üê≥ Setting up Docker development environment..." "Info"
    
    if (-not (Test-Command "docker")) {
        Write-StatusMessage "‚ùå Docker not found. Please install Docker first." "Error"
        return
    }
    
    # Verify docker-compose.yml exists
    if (-not (Test-Path "docker-compose.yml")) {
        Write-StatusMessage "‚ùå docker-compose.yml not found in current directory" "Error"
        return
    }
    
    Write-StatusMessage "üîç Validating Docker Compose configuration..." "Info"
    try {
        docker-compose config | Out-Null
        Write-StatusMessage "‚úÖ Docker Compose configuration is valid" "Success"
    }
    catch {
        Write-StatusMessage "‚ùå Docker Compose configuration error: $($_.Exception.Message)" "Error"
        return
    }
    
    Write-StatusMessage "üöÄ Starting development stack..." "Info"
    docker-compose up -d
    
    Start-Sleep -Seconds 10
    
    Write-StatusMessage "üìä Stack status:" "Info"
    docker-compose ps
    
    Write-StatusMessage "üåê Services available at:" "Success"
    Write-Host "   - Grafana: http://localhost:3000 (admin/admin123)" -ForegroundColor Gray
    Write-Host "   - Prometheus: http://localhost:9090" -ForegroundColor Gray  
    Write-Host "   - Jupyter: http://localhost:8888 (token: agent-dev-token)" -ForegroundColor Gray
    Write-Host "   - Redis Commander: http://localhost:8081" -ForegroundColor Gray
    Write-Host "   - Neo4j Browser: http://localhost:7474 (neo4j/password)" -ForegroundColor Gray
}

function Initialize-SecretsTemplate {
    Write-StatusMessage "üîê Setting up secrets management..." "Info"
    
    $secretsTemplate = @"
# Super Alita Development Secrets
# Copy this file to .env.secrets and update with real values
# WARNING: Never commit .env.secrets to version control!

# Core API Keys
GEMINI_API_KEY=your-gemini-api-key-here
OPENAI_API_KEY=your-openai-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Database Connection Strings
DATABASE_URL=postgresql://agent:agent123@localhost:5432/agent_dev
REDIS_URL=redis://localhost:6379/0
MONGO_URL=mongodb://admin:password@localhost:27017/agent_dev?authSource=admin
NEO4J_URL=bolt://neo4j:password@localhost:7687

# Development Configuration
AGENT_MODE=development
LOG_LEVEL=DEBUG
DEBUG_MODE=true
PYTHONPATH=./src

# External Service Integration
GITHUB_TOKEN=your-github-token-here
GRAFANA_API_KEY=your-grafana-api-key-here

# Security Settings
JWT_SECRET=your-jwt-secret-key-here
ENCRYPTION_KEY=your-encryption-key-here

# Performance Tuning
REDIS_MAX_CONNECTIONS=100
DB_POOL_SIZE=20
WORKER_PROCESSES=4
"@
    
    Set-Content -Path ".env.secrets.template" -Value $secretsTemplate
    Write-StatusMessage "‚úÖ Secrets template created: .env.secrets.template" "Success"
    
    if (-not (Test-Path ".env.secrets")) {
        Copy-Item ".env.secrets.template" ".env.secrets"
        Write-StatusMessage "üìù Created .env.secrets - EDIT WITH YOUR REAL VALUES" "Warning"
    }
    
    # Update .gitignore
    $gitignoreEntries = @(
        "",
        "# Super Alita Secrets",
        ".env.secrets",
        ".env.secrets.*",
        "!.env.secrets.template"
    )
    
    if (Test-Path ".gitignore") {
        $gitignore = Get-Content ".gitignore" -Raw
        if ($gitignore -notmatch "\.env\.secrets") {
            Add-Content ".gitignore" ($gitignoreEntries -join "`n")
            Write-StatusMessage "‚úÖ Updated .gitignore with secrets exclusions" "Success"
        }
    }
    else {
        Set-Content ".gitignore" ($gitignoreEntries -join "`n")
        Write-StatusMessage "‚úÖ Created .gitignore with secrets exclusions" "Success"
    }
}

function Show-CompletionMessage {
    Write-StatusMessage "" "Info"
    Write-StatusMessage "üéâ Ultimate Terminal Cockpit Setup Complete!" "Success"
    Write-StatusMessage "=" * 50 "Success"
    Write-StatusMessage "" "Info"
    Write-StatusMessage "üöÄ Quick Start Commands:" "Highlight"
    Write-Host "   alita-stack-up     - Start development stack" -ForegroundColor Gray
    Write-Host "   alita-validate     - Run comprehensive validation" -ForegroundColor Gray  
    Write-Host "   alita-repl         - Start enhanced Python REPL" -ForegroundColor Gray
    Write-Host "   alita-glances      - Live system monitoring" -ForegroundColor Gray
    Write-Host "   alita-info         - Show environment information" -ForegroundColor Gray
    Write-StatusMessage "" "Info"
    Write-StatusMessage "üìö Key Features Installed:" "Highlight"
    Write-Host "   ‚úÖ Starship prompt with agent status indicators" -ForegroundColor Green
    Write-Host "   ‚úÖ Docker development stack (Redis, Mongo, Neo4j, etc.)" -ForegroundColor Green
    Write-Host "   ‚úÖ Enhanced PowerShell profile with shortcuts" -ForegroundColor Green
    Write-Host "   ‚úÖ Secrets management template" -ForegroundColor Green
    Write-Host "   ‚úÖ Professional development aliases" -ForegroundColor Green
    Write-StatusMessage "" "Info"
    Write-StatusMessage "üîÑ Next Steps:" "Warning"
    Write-Host "   1. Restart PowerShell to activate new profile" -ForegroundColor Yellow
    Write-Host "   2. Edit .env.secrets with your API keys" -ForegroundColor Yellow
    Write-Host "   3. Run 'alita-stack-up' to start services" -ForegroundColor Yellow
    Write-Host "   4. Run 'alita-validate' to test the system" -ForegroundColor Yellow
    Write-StatusMessage "" "Info"
}

# Main execution
Write-StatusMessage "üöÄ Super Alita Ultimate Terminal Cockpit Setup" "Highlight"
Write-StatusMessage "=" * 50 "Highlight"

if ($All) {
    $InstallTools = $true
    $ConfigureProfile = $true
    $SetupDocker = $true
}

if ($InstallTools -or $All) {
    Install-ToolsIfNeeded
    Setup-StarshipConfig
}

if ($ConfigureProfile -or $All) {
    Setup-PowerShellProfile
}

if ($SetupDocker -or $All) {
    Setup-DockerEnvironment
}

# Always setup secrets template
Initialize-SecretsTemplate

Show-CompletionMessage

# If no specific options were provided, show help
if (-not ($InstallTools -or $ConfigureProfile -or $SetupDocker -or $All)) {
    Write-StatusMessage "" "Info"
    Write-StatusMessage "Usage: .\setup-cockpit.ps1 [options]" "Info"
    Write-StatusMessage "" "Info"
    Write-StatusMessage "Options:" "Highlight"
    Write-Host "  -InstallTools     Install required tools (Starship, Docker, etc.)" -ForegroundColor Gray
    Write-Host "  -ConfigureProfile Setup PowerShell profile with enhancements" -ForegroundColor Gray
    Write-Host "  -SetupDocker      Initialize Docker development stack" -ForegroundColor Gray
    Write-Host "  -All              Perform all setup steps" -ForegroundColor Gray
    Write-StatusMessage "" "Info"
    Write-StatusMessage "Example: .\setup-cockpit.ps1 -All" "Info"
}
# SIG # Begin signature block
# MIIaSQYJKoZIhvcNAQcCoIIaOjCCGjYCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBdZQf8k1L/DfxR
# gS6eIh6A3LHa7hWZnjIZq/iNyRlZIKCCFRswggHdMIIBRqADAgECAhB1LVe8LkJa
# nkn+CcMy/7DwMA0GCSqGSIb3DQEBBQUAMBUxEzARBgNVBAMTCkF1dG9Ib3RrZXkw
# IBcNMjUwMzEwMTkzNDMyWhgPOTk5OTAxMDExMjAwMDBaMBUxEzARBgNVBAMTCkF1
# dG9Ib3RrZXkwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKkvQYONqskINI1i
# BBkYCk9PniXin9+yMrpQAml4pZED9brGePZd+51f5FsTrNpeMRnRV7NNyJEDOLFR
# IhkBPDvwNciJEFuNLCbUkt9O6o3uT858uvn5PJ1HHq4yrtW7OQYkA9c69Pfh+xIv
# t9P8wBgkrs4XnFAi4cvLMWE/P2ydAgMBAAGjLDAqMBAGA1UdBAEB/wQGMAQDAgSQ
# MBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA0GCSqGSIb3DQEBBQUAA4GBADXNo2wn
# fDUdgw3T5iYLJ+pix6VKMDc4OltoD2eZ1dW1C3LMdUyenLliTS+sd+e1uaHwf2iD
# VpKpLLiWMXKyxlvqg09K5Ajz1yIt3POxQ7VYXazT+xbbC1JTD0rXiD6M847uWTSq
# PwR9+nIwhhtUpMksc07Zifqd4V4w3MSdM+DuMIIFjTCCBHWgAwIBAgIQDpsYjvnQ
# Lefv21DiCEAYWjANBgkqhkiG9w0BAQwFADBlMQswCQYDVQQGEwJVUzEVMBMGA1UE
# ChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSQwIgYD
# VQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwHhcNMjIwODAxMDAwMDAw
# WhcNMzExMTA5MjM1OTU5WjBiMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNl
# cnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdp
# Q2VydCBUcnVzdGVkIFJvb3QgRzQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
# AoICAQC/5pBzaN675F1KPDAiMGkz7MKnJS7JIT3yithZwuEppz1Yq3aaza57G4QN
# xDAf8xukOBbrVsaXbR2rsnnyyhHS5F/WBTxSD1Ifxp4VpX6+n6lXFllVcq9ok3DC
# srp1mWpzMpTREEQQLt+C8weE5nQ7bXHiLQwb7iDVySAdYyktzuxeTsiT+CFhmzTr
# BcZe7FsavOvJz82sNEBfsXpm7nfISKhmV1efVFiODCu3T6cw2Vbuyntd463JT17l
# Necxy9qTXtyOj4DatpGYQJB5w3jHtrHEtWoYOAMQjdjUN6QuBX2I9YI+EJFwq1WC
# QTLX2wRzKm6RAXwhTNS8rhsDdV14Ztk6MUSaM0C/CNdaSaTC5qmgZ92kJ7yhTzm1
# EVgX9yRcRo9k98FpiHaYdj1ZXUJ2h4mXaXpI8OCiEhtmmnTK3kse5w5jrubU75KS
# Op493ADkRSWJtppEGSt+wJS00mFt6zPZxd9LBADMfRyVw4/3IbKyEbe7f/LVjHAs
# QWCqsWMYRJUadmJ+9oCw++hkpjPRiQfhvbfmQ6QYuKZ3AeEPlAwhHbJUKSWJbOUO
# UlFHdL4mrLZBdd56rF+NP8m800ERElvlEFDrMcXKchYiCd98THU/Y+whX8QgUWtv
# sauGi0/C1kVfnSD8oR7FwI+isX4KJpn15GkvmB0t9dmpsh3lGwIDAQABo4IBOjCC
# ATYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU7NfjgtJxXWRM3y5nP+e6mK4c
# D08wHwYDVR0jBBgwFoAUReuir/SSy4IxLVGLp6chnfNtyA8wDgYDVR0PAQH/BAQD
# AgGGMHkGCCsGAQUFBwEBBG0wazAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGln
# aWNlcnQuY29tMEMGCCsGAQUFBzAChjdodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5j
# b20vRGlnaUNlcnRBc3N1cmVkSURSb290Q0EuY3J0MEUGA1UdHwQ+MDwwOqA4oDaG
# NGh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RD
# QS5jcmwwEQYDVR0gBAowCDAGBgRVHSAAMA0GCSqGSIb3DQEBDAUAA4IBAQBwoL9D
# XFXnOF+go3QbPbYW1/e/Vwe9mqyhhyzshV6pGrsi+IcaaVQi7aSId229GhT0E0p6
# Ly23OO/0/4C5+KH38nLeJLxSA8hO0Cre+i1Wz/n096wwepqLsl7Uz9FDRJtDIeuW
# cqFItJnLnU+nBgMTdydE1Od/6Fmo8L8vC6bp8jQ87PcDx4eo0kxAGTVGamlUsLih
# Vo7spNU96LHc/RzY9HdaXFSMb++hUD38dglohJ9vytsgjTVgHAIDyyCwrFigDkBj
# xZgiwbJZ9VVrzyerbHbObyMt9H5xaiNrIv8SuFQtJ37YOtnwtoeW/VvRXKwYw02f
# c7cBqZ9Xql4o4rmUMIIGtDCCBJygAwIBAgIQDcesVwX/IZkuQEMiDDpJhjANBgkq
# hkiG9w0BAQsFADBiMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5j
# MRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBU
# cnVzdGVkIFJvb3QgRzQwHhcNMjUwNTA3MDAwMDAwWhcNMzgwMTE0MjM1OTU5WjBp
# MQswCQYDVQQGEwJVUzEXMBUGA1UEChMORGlnaUNlcnQsIEluYy4xQTA/BgNVBAMT
# OERpZ2lDZXJ0IFRydXN0ZWQgRzQgVGltZVN0YW1waW5nIFJTQTQwOTYgU0hBMjU2
# IDIwMjUgQ0ExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtHgx0wqY
# QXK+PEbAHKx126NGaHS0URedTa2NDZS1mZaDLFTtQ2oRjzUXMmxCqvkbsDpz4aH+
# qbxeLho8I6jY3xL1IusLopuW2qftJYJaDNs1+JH7Z+QdSKWM06qchUP+AbdJgMQB
# 3h2DZ0Mal5kYp77jYMVQXSZH++0trj6Ao+xh/AS7sQRuQL37QXbDhAktVJMQbzIB
# HYJBYgzWIjk8eDrYhXDEpKk7RdoX0M980EpLtlrNyHw0Xm+nt5pnYJU3Gmq6bNMI
# 1I7Gb5IBZK4ivbVCiZv7PNBYqHEpNVWC2ZQ8BbfnFRQVESYOszFI2Wv82wnJRfN2
# 0VRS3hpLgIR4hjzL0hpoYGk81coWJ+KdPvMvaB0WkE/2qHxJ0ucS638ZxqU14lDn
# ki7CcoKCz6eum5A19WZQHkqUJfdkDjHkccpL6uoG8pbF0LJAQQZxst7VvwDDjAmS
# FTUms+wV/FbWBqi7fTJnjq3hj0XbQcd8hjj/q8d6ylgxCZSKi17yVp2NL+cnT6To
# y+rN+nM8M7LnLqCrO2JP3oW//1sfuZDKiDEb1AQ8es9Xr/u6bDTnYCTKIsDq1Btm
# XUqEG1NqzJKS4kOmxkYp2WyODi7vQTCBZtVFJfVZ3j7OgWmnhFr4yUozZtqgPrHR
# VHhGNKlYzyjlroPxul+bgIspzOwbtmsgY1MCAwEAAaOCAV0wggFZMBIGA1UdEwEB
# /wQIMAYBAf8CAQAwHQYDVR0OBBYEFO9vU0rp5AZ8esrikFb2L9RJ7MtOMB8GA1Ud
# IwQYMBaAFOzX44LScV1kTN8uZz/nupiuHA9PMA4GA1UdDwEB/wQEAwIBhjATBgNV
# HSUEDDAKBggrBgEFBQcDCDB3BggrBgEFBQcBAQRrMGkwJAYIKwYBBQUHMAGGGGh0
# dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBBBggrBgEFBQcwAoY1aHR0cDovL2NhY2Vy
# dHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1c3RlZFJvb3RHNC5jcnQwQwYDVR0f
# BDwwOjA4oDagNIYyaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1
# c3RlZFJvb3RHNC5jcmwwIAYDVR0gBBkwFzAIBgZngQwBBAIwCwYJYIZIAYb9bAcB
# MA0GCSqGSIb3DQEBCwUAA4ICAQAXzvsWgBz+Bz0RdnEwvb4LyLU0pn/N0IfFiBow
# f0/Dm1wGc/Do7oVMY2mhXZXjDNJQa8j00DNqhCT3t+s8G0iP5kvN2n7Jd2E4/iEI
# UBO41P5F448rSYJ59Ib61eoalhnd6ywFLerycvZTAz40y8S4F3/a+Z1jEMK/DMm/
# axFSgoR8n6c3nuZB9BfBwAQYK9FHaoq2e26MHvVY9gCDA/JYsq7pGdogP8HRtrYf
# ctSLANEBfHU16r3J05qX3kId+ZOczgj5kjatVB+NdADVZKON/gnZruMvNYY2o1f4
# MXRJDMdTSlOLh0HCn2cQLwQCqjFbqrXuvTPSegOOzr4EWj7PtspIHBldNE2K9i69
# 7cvaiIo2p61Ed2p8xMJb82Yosn0z4y25xUbI7GIN/TpVfHIqQ6Ku/qjTY6hc3hsX
# MrS+U0yy+GWqAXam4ToWd2UQ1KYT70kZjE4YtL8Pbzg0c1ugMZyZZd/BdHLiRu7h
# AWE6bTEm4XYRkA6Tl4KSFLFk43esaUeqGkH/wyW4N7OigizwJWeukcyIPbAvjSab
# nf7+Pu0VrFgoiovRDiyx3zEdmcif/sYQsfch28bZeUz2rtY/9TCA6TD8dC3JE3rY
# krhLULy7Dc90G6e8BlqmyIjlgp2+VqsS9/wQD7yFylIz0scmbKvFoW2jNrbM1pD2
# T7m3XDCCBu0wggTVoAMCAQICEAqA7xhLjfEFgtHEdqeVdGgwDQYJKoZIhvcNAQEL
# BQAwaTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDkRpZ2lDZXJ0LCBJbmMuMUEwPwYD
# VQQDEzhEaWdpQ2VydCBUcnVzdGVkIEc0IFRpbWVTdGFtcGluZyBSU0E0MDk2IFNI
# QTI1NiAyMDI1IENBMTAeFw0yNTA2MDQwMDAwMDBaFw0zNjA5MDMyMzU5NTlaMGMx
# CzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjE7MDkGA1UEAxMy
# RGlnaUNlcnQgU0hBMjU2IFJTQTQwOTYgVGltZXN0YW1wIFJlc3BvbmRlciAyMDI1
# IDEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDQRqwtEsae0OquYFaz
# K1e6b1H/hnAKAd/KN8wZQjBjMqiZ3xTWcfsLwOvRxUwXcGx8AUjni6bz52fGTfr6
# PHRNv6T7zsf1Y/E3IU8kgNkeECqVQ+3bzWYesFtkepErvUSbf+EIYLkrLKd6qJnu
# zK8Vcn0DvbDMemQFoxQ2Dsw4vEjoT1FpS54dNApZfKY61HAldytxNM89PZXUP/5w
# WWURK+IfxiOg8W9lKMqzdIo7VA1R0V3Zp3DjjANwqAf4lEkTlCDQ0/fKJLKLkzGB
# Tpx6EYevvOi7XOc4zyh1uSqgr6UnbksIcFJqLbkIXIPbcNmA98Oskkkrvt6lPAw/
# p4oDSRZreiwB7x9ykrjS6GS3NR39iTTFS+ENTqW8m6THuOmHHjQNC3zbJ6nJ6SXi
# LSvw4Smz8U07hqF+8CTXaETkVWz0dVVZw7knh1WZXOLHgDvundrAtuvz0D3T+dYa
# NcwafsVCGZKUhQPL1naFKBy1p6llN3QgshRta6Eq4B40h5avMcpi54wm0i2ePZD5
# pPIssoszQyF4//3DoK2O65Uck5Wggn8O2klETsJ7u8xEehGifgJYi+6I03UuT1j7
# FnrqVrOzaQoVJOeeStPeldYRNMmSF3voIgMFtNGh86w3ISHNm0IaadCKCkUe2Lnw
# JKa8TIlwCUNVwppwn4D3/Pt5pwIDAQABo4IBlTCCAZEwDAYDVR0TAQH/BAIwADAd
# BgNVHQ4EFgQU5Dv88jHt/f3X85FxYxlQQ89hjOgwHwYDVR0jBBgwFoAU729TSunk
# Bnx6yuKQVvYv1Ensy04wDgYDVR0PAQH/BAQDAgeAMBYGA1UdJQEB/wQMMAoGCCsG
# AQUFBwMIMIGVBggrBgEFBQcBAQSBiDCBhTAkBggrBgEFBQcwAYYYaHR0cDovL29j
# c3AuZGlnaWNlcnQuY29tMF0GCCsGAQUFBzAChlFodHRwOi8vY2FjZXJ0cy5kaWdp
# Y2VydC5jb20vRGlnaUNlcnRUcnVzdGVkRzRUaW1lU3RhbXBpbmdSU0E0MDk2U0hB
# MjU2MjAyNUNBMS5jcnQwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL2NybDMuZGln
# aWNlcnQuY29tL0RpZ2lDZXJ0VHJ1c3RlZEc0VGltZVN0YW1waW5nUlNBNDA5NlNI
# QTI1NjIwMjVDQTEuY3JsMCAGA1UdIAQZMBcwCAYGZ4EMAQQCMAsGCWCGSAGG/WwH
# ATANBgkqhkiG9w0BAQsFAAOCAgEAZSqt8RwnBLmuYEHs0QhEnmNAciH45PYiT9s1
# i6UKtW+FERp8FgXRGQ/YAavXzWjZhY+hIfP2JkQ38U+wtJPBVBajYfrbIYG+Dui4
# I4PCvHpQuPqFgqp1PzC/ZRX4pvP/ciZmUnthfAEP1HShTrY+2DE5qjzvZs7JIIgt
# 0GCFD9ktx0LxxtRQ7vllKluHWiKk6FxRPyUPxAAYH2Vy1lNM4kzekd8oEARzFAWg
# eW3az2xejEWLNN4eKGxDJ8WDl/FQUSntbjZ80FU3i54tpx5F/0Kr15zW/mJAxZMV
# BrTE2oi0fcI8VMbtoRAmaaslNXdCG1+lqvP4FbrQ6IwSBXkZagHLhFU9HCrG/syT
# RLLhAezu/3Lr00GrJzPQFnCEH1Y58678IgmfORBPC1JKkYaEt2OdDh4GmO0/5cHe
# lAK2/gTlQJINqDr6JfwyYHXSd+V08X1JUPvB4ILfJdmL+66Gp3CSBXG6IwXMZUXB
# htCyIaehr0XkBoDIGMUG1dUtwq1qmcwbdUfcSYCn+OwncVUXf53VJUNOaMWMts0V
# lRYxe5nK+At+DI96HAlXHAL5SlfYxJ7La54i71McVWRP66bW+yERNpbJCjyCYG2j
# +bdpxo/1Cy4uPcU3AWVPGrbn5PhDBf3Froguzzhk++ami+r3Qrx5bIbY3TVzgiFI
# 7Gq3zWcxggSEMIIEgAIBATApMBUxEzARBgNVBAMTCkF1dG9Ib3RrZXkCEHUtV7wu
# QlqeSf4JwzL/sPAwDQYJYIZIAWUDBAIBBQCggYQwGAYKKwYBBAGCNwIBDDEKMAig
# AoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgEL
# MQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQglYTTnCbk8Z15npaY5s9H
# afkTJejATowrxidW9CS5nmUwDQYJKoZIhvcNAQEBBQAEgYBVkF3QAfRaNfoWXO2K
# to81SDEMBJYggtx3UcCcQIL8+L0aRjr6pfdh02M2Mh/GPEwqFhJCGKX7X1Uh68EU
# r2VNHONqkmd+W5xotq7S+WIriFTIXAul7HAI3Opg9uk+U1nd4/A8tGWs/cx1xCgO
# RBInqIO5cHG/SqCHf7KJwuif9qGCAyYwggMiBgkqhkiG9w0BCQYxggMTMIIDDwIB
# ATB9MGkxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjFBMD8G
# A1UEAxM4RGlnaUNlcnQgVHJ1c3RlZCBHNCBUaW1lU3RhbXBpbmcgUlNBNDA5NiBT
# SEEyNTYgMjAyNSBDQTECEAqA7xhLjfEFgtHEdqeVdGgwDQYJYIZIAWUDBAIBBQCg
# aTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yNTA4
# MTYwOTE4MTRaMC8GCSqGSIb3DQEJBDEiBCDIEinKWaD/luY5mK5Zc08w6KLWX60f
# o9RcaCNqgaN0kjANBgkqhkiG9w0BAQEFAASCAgDJqtGkA7KtVBUN6sYyzc87xh4o
# tFPqYpaJ2AkZ61X+3Kas2wkgFSBchQaL9hs05PwNZUFAAKe1L/EoP9M8u1gqFDE4
# lZ1CmwgvhWb1PFud+F1kMC1FzHmhqqlEBeD4WkWQf9foyQpSOx/zFYSMacU2eV9n
# fNaualZ172XV9BlJclWzQy1CsF2Z+xXEYqKKSP4Z+BRqcOqPH/mgT/GhaW4W8XVC
# axK/FRBjG9P4VGRCTxUh4/DJMcqCIv8EPXXSuaG8B7fB2HjNfRqXrTI+HEKZNC4H
# P7qlYuGbr7qb5arJFUfWkgcDGisNMM8JPNG7538k6s9ghkWL5DJ5nDQCpg78iiT0
# B6sJ3+CcHTm+b6sVt9zVe6XvjALZfHoOhDV/AQaIVUjgjj1dTSwkrbp+eRdMrhGQ
# HtpsgKjF9RO90AFq0ImraIK/25p3mjKW4L2L8HS5Uxo19G24+YUwPvGxxoMKD/zX
# m6TfVZiU+lsSWSIy/89hkaa0Az+Pt4ijCoqFv/fpk6PJRiVEIsnLHdW/0Rx170w9
# sMlJ+FfnvZe6qqNB69JtkDUD9tvjy+R/BMzZUTZzQwjitSJsxhuzeOnAMbljvUGP
# VECFcrSUy4JlrZg0i0GuDwo1a95OWoLTY05VGOC5kS5Yk2BXRFsN/uML9VKaxOgy
# sxGIwKD/sFvAJFbC6g==
# SIG # End signature block
